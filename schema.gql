# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input FilterDto {
  field: String!
  data: String!
}

type IUser {
  id: Float!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type IUsers {
  meta: MetaPaginationInterface!
  items: [IUser!]!
}

type MetaPaginationInterface {
  totalItems: Float!
  itemCount: Float!
  itemsPerPage: Float!
  totalPages: Float!
  currentPage: Float!
}

type Query {
  getUsers(queryParams: QueryFilterDto!): IUsers!
  getUser(id: Float!): IUser
}

input QueryFilterDto {
  """
  
  - Paginate with limit and offset. Ex: limit:10, page:1
  
  """
  page: Float = 1

  """
  
  - Paginate with limit and offset. Ex: limit:10, page:1
  
  """
  limit: Float = 10

  """
  
  - Order by fields and order reverse use prefix "ASC or DESC". Ex: orderBy: "createdAt:DESC"
  
  """
  orderBy: String

  """
  
  - Query by text. Ex: q:"abcxyz"
  
  """
  q: String

  """
  
  - Filter equal: filters:[{field: "name", operator: eq, data: "Jayce"}]
  - Filter not equal: filters:[{field: "name", operator: neq, data: "Jayce"}]
  - Filter less than: filters:[{field: "age", operator: lt, data: 40}]
  - Filter greater than: filters:[{field: "age", operator: gt, data: 40}]
  - Filter less than and equal: filters:[{field: "age", operator: lte, data: 40}]
  - Filter greater than and equal: filters:[{field: "age", operator: gte, data: 40}]
  - Filter field in many choice: filters:[{field: "name", operator: in, data: "Alex,Julia"}]
  - Filter field not in many choice: filters:[{field: "name", operator: nin, data: "Alex,Julia"}]
  - Filter field by text: filters:[{field: "name", operator: like, data: "Jayce"}]
  """
  filters: [FilterDto!]
}
